// Code generated by command: go run bitflipavo.go -out bitflip.s -stubs stub.go. DO NOT EDIT.

#include "textflag.h"

DATA bytes<>+0(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA bytes<>+8(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA bytes<>+16(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA bytes<>+24(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA bytes<>+32(SB)/8, $0x0e060a020c040800
DATA bytes<>+40(SB)/8, $0x0f070b030d050901
DATA bytes<>+48(SB)/8, $0x0e060a020c040800
DATA bytes<>+56(SB)/8, $0x0f070b030d050901
DATA bytes<>+64(SB)/8, $0xe060a020c0408000
DATA bytes<>+72(SB)/8, $0xf070b030d0509010
DATA bytes<>+80(SB)/8, $0xe060a020c0408000
DATA bytes<>+88(SB)/8, $0xf070b030d0509010
GLOBL bytes<>(SB), RODATA|NOPTR, $96

// func Reverse64AVX(x uint64) uint64
// Requires: AVX, AVX2, SSE, SSE2
TEXT Â·Reverse64AVX(SB), NOSPLIT, $0-16
	MOVQ    x+0(FP), AX
	MOVQ    AX, X0
	LEAQ    bytes<>+0(SB), AX
	MOVQ    $0x0001020304050607, CX
	MOVQ    $0x08090a0b0c0d0e0f, DX
	MOVQ    DX, X1
	MOVLHPS X1, X1
	MOVQ    CX, X1
	VMOVDQA (AX), Y2
	VMOVDQA 32(AX), Y3
	VMOVDQA 64(AX), Y4
	VPAND   Y2, Y0, Y5
	VPANDN  Y0, Y2, Y0
	VPSRLD  $0x04, Y0, Y0
	VPSHUFB Y5, Y4, Y5
	VPSHUFB Y0, Y3, Y0
	VPOR    Y0, Y5, Y0
	VPSHUFB Y1, Y0, Y0
	MOVQ    X0, AX
	MOVQ    AX, ret+8(FP)
	RET
