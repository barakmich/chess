// Code generated by command: go run bitflipavo.go -out bitflip.s -stubs stub.go. DO NOT EDIT.

#include "textflag.h"

// func Reverse64AVX(x uint64) uint64
// Requires: AVX, AVX2, SSE, SSE2, SSE4.1
TEXT Â·Reverse64AVX(SB), NOSPLIT, $0-16
	MOVQ    x+0(FP), AX
	PINSRQ  $0x00, AX, X5
	MOVQ    $0x5555555555555555, AX
	MOVQ    $0x3333333333333333, CX
	MOVQ    $0x0f0f0f0f0f0f0f0f, DX
	MOVQ    $0x0001020304050607, BX
	MOVQ    $0x08090a0b0c0d0e0f, SI
	MOVQ    AX, X3
	MOVQ    CX, X0
	MOVQ    DX, X1
	MOVQ    SI, X2
	MOVLHPS X3, X3
	MOVLHPS X0, X0
	MOVLHPS X1, X1
	MOVLHPS X2, X2
	MOVQ    BX, X2
	MOVQ    $0x0000000000000001, AX
	MOVQ    AX, X14
	VMOVDQA Y5, Y4
	VPSRLQ  X14, Y5, Y10
	VPAND   Y3, Y4, Y11
	VPAND   Y3, Y10, Y12
	VPSLLQ  X14, Y11, Y13
	VPOR    Y12, Y13, Y4
	MOVQ    $0x0000000000000002, AX
	MOVQ    AX, X14
	VMOVDQA Y4, Y3
	VPSRLQ  X14, Y4, Y10
	VPAND   Y0, Y3, Y11
	VPAND   Y0, Y10, Y12
	VPSLLQ  X14, Y11, Y13
	VPOR    Y12, Y13, Y3
	MOVQ    $0x0000000000000004, AX
	MOVQ    AX, X14
	VMOVDQA Y3, Y0
	VPSRLQ  X14, Y3, Y10
	VPAND   Y1, Y0, Y11
	VPAND   Y1, Y10, Y12
	VPSLLQ  X14, Y11, Y13
	VPOR    Y12, Y13, Y5
	VPSHUFB Y2, Y5, Y0
	MOVQ    X0, AX
	MOVQ    AX, ret+8(FP)
	RET
